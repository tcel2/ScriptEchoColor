#!/bin/bash
# Copyright (C) 2004-2012 by Henrique Abdalla
#
# This file is part of ScriptEchoColor.
#
# ScriptEchoColor simplifies Linux terminal text colorizing, formatting 
# and several steps of script coding.
#
# ScriptEchoColor is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# ScriptEchoColor is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ScriptEchoColor. If not, see <http://www.gnu.org/licenses/>.
#
# Homepage: http://scriptechocolor.sourceforge.net/
# Project Homepage: https://sourceforge.net/projects/scriptechocolor/


if [[ -z "$*" ]]; then
  echo "$0: use option --help for options" >/dev/stderr
  exit 1
fi

if [[ "$1" == "--help" ]]; then
  ScriptEchoColor "@gConverts decimal(255)/hexadecimal(0xFF)/octal(0777) to octal, then to ascii. \n\
@bUsed to convert returning value \$? from ScriptEchoColor -Q.\n\
@rBeware that some values may not be normal characters but \n\
terminal control caracters providing undesired results if output to running terminal.\n\
@gIt accepts multiple parameters/numbers separated by ' ', ',' or '\\'." >/dev/stderr
  exit
fi  

str="$*"
str2=""
bChkOctal=false
for((n=0;n<${#str};n++));do
  char="${str:n:1}"
  
  # Octals must begin with 0
  if $bChkOctal && [[ "$char" != '0' ]] && [[ -z `echo "$char" |tr -d "[:digit:]"` ]]; then
    str2="${str2}0"
  fi
  bChkOctal=false
  if [[ "$char" == '\' ]]; then
    bChkOctal=true
  fi
  
  if [[ -z "$char"     ]] || # '\n' ' ' '\t' ...
     [[ "$char" == '\' ]] ||
     [[ "$char" == ',' ]]; then
    str2="$str2 "
  else
    str2="$str2$char"
  fi
done
str="$str2"

eval 'strArray=('$str')'
strFmt=""
for((n=0;n<${#strArray[*]};n++));do
  strFmt="$strFmt""\\\0%o"
done

#echo "-------> ${strArray[*]}"
#printf "$strFmt" ${strArray[*]}
echo -en `printf "$strFmt" ${strArray[*]}`
