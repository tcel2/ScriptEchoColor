#!/bin/bash
# Copyright (C) 2004-2014 by Henrique Abdalla
#
# This file is part of ScriptEchoColor.
#
# ScriptEchoColor simplifies Linux terminal text colorizing, formatting 
# and several steps of script coding.
#
# ScriptEchoColor is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# ScriptEchoColor is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ScriptEchoColor. If not, see <http://www.gnu.org/licenses/>.
#
# Homepage: http://scriptechocolor.sourceforge.net/
# Project Homepage: https://sourceforge.net/projects/scriptechocolor/

bCore=false
bBase=false
bMisc=false
bVars=false
bMaintenanceDaemon=true
bVarChildDB=true
bForceReload=false
while ! ${1+false} && [[ "${1:0:1}" == "-" ]];do
	if [[ "$1" == "--help" ]];then #help show this help
		echo "Initialize environment variables sharing between bash scripts."
		echo 'use like: eval `'`basename $0`'`'
		echo
		eval `secinit --base`;SECFUNCshowHelp --nosort; #grep "[#]help" "$0"
		echo
		exit
	elif [[ "$1" == "--help-core" ]];then #help help for base lib
		echo '`secGetInstallPath.sh`/lib/ScriptEchoColor/utils/funcCore.sh --help'
		eval '`secGetInstallPath.sh`/lib/ScriptEchoColor/utils/funcCore.sh --help'
		exit
	elif [[ "$1" == "--help-base" ]];then #help help for base lib
		echo '`secGetInstallPath.sh`/lib/ScriptEchoColor/utils/funcBase.sh --help'
		eval '`secGetInstallPath.sh`/lib/ScriptEchoColor/utils/funcBase.sh --help'
		exit
	elif [[ "$1" == "--help-misc" ]];then #help help for misc lib
		echo '`secGetInstallPath.sh`/lib/ScriptEchoColor/utils/funcMisc.sh --help'
		eval '`secGetInstallPath.sh`/lib/ScriptEchoColor/utils/funcMisc.sh --help'
		exit
	elif [[ "$1" == "--help-vars" ]];then #help help for vars lib
		echo '`secGetInstallPath.sh`/lib/ScriptEchoColor/utils/funcVars.sh --help'
		eval '`secGetInstallPath.sh`/lib/ScriptEchoColor/utils/funcVars.sh --help'
		exit
	elif [[ "$1" == "--core" ]];then #help load core lib
		bCore=true
	elif [[ "$1" == "--base" ]];then #help load base lib
		bBase=true
	elif [[ "$1" == "--misc" ]];then #help load misc lib, loads base
		bMisc=true
	elif [[ "$1" == "--vars" ]];then #help load vars lib, loads misc (default)
		bVars=true
	elif [[ "$1" == "--force" || "$1" == "-f" ]];then #help force reload of libs, probably only useful for this project development
		bForceReload=true
	elif [[ "$1" == "--novarchilddb" || "$1" == "--nochild" ]];then #help "is not a child" makes the script calling this option to do NOT inherit its parent pid shared environment variables DB, only works if vars lib is present
		bVarChildDB=false
	elif [[ "$1" == "--nomaintenancedaemon" ]];then #help do not check and auto load the maintenance daemon
		bMaintenanceDaemon=false
	else
		echo "PROBLEM: invalid option: $1"
		exit 1
	fi
	shift
done

#if ! $bBase && ! $bMisc && ! $bVars;then
if ! $bCore && ! $bBase && ! $bMisc && ! $bVars;then
	# the one that uses most libs shall be the default
	bVars=true
fi

# DO NOT SKIP INITIALIZATION LIKE this, it break aliases :( -> #if ! ${SECinitialized-false};then
# $PPID is the pid where the output of this script may have already been evaluated

if $bForceReload || ${SECinstallPath+false};then 
	export SECinstallPath="`secGetInstallPath.sh`"; #to be faster
	echo "export SECinstallPath=\"$SECinstallPath\";"; #to user script run this
fi;

#echo "${SECnPidInitLibBase-},${SECnPidInitLibMisc-},${SECnPidInitLibVars-},$$,$PPID" >>/dev/stderr
if $bCore;then 
	if ! $bForceReload && [[ "${SECnPidInitLibCore-}" == "$PPID" ]];then exit;fi
	echo "source \"$SECinstallPath/lib/ScriptEchoColor/utils/funcCore.sh\";"
elif $bBase;then
	if ! $bForceReload && [[ "${SECnPidInitLibBase-}" == "$PPID" ]];then exit;fi
	echo "source \"$SECinstallPath/lib/ScriptEchoColor/utils/funcBase.sh\";" #it imports funcCore.sh
elif $bMisc;then
	if ! $bForceReload && [[ "${SECnPidInitLibMisc-}" == "$PPID" ]];then exit;fi
	echo "source \"$SECinstallPath/lib/ScriptEchoColor/utils/funcMisc.sh\";" #it imports funcBase.sh
elif $bVars;then
	if ! $bForceReload && [[ "${SECnPidInitLibVars-}" == "$PPID" ]];then exit;fi
	echo "source \"$SECinstallPath/lib/ScriptEchoColor/utils/funcVars.sh\";" #it imports funcMisc.sh
fi

# export function before running any function!
echo 'eval "`SECFUNCexportFunctions`";'

# if functions have been exported before this, if his opens any subshell, exported functions will work (despite aliases and arrays wont)... mmm... may be it is pointless...
if $bVars;then
	if $bVarChildDB;then
		echo 'SECFUNCvarInit;'
	else
		echo 'SECFUNCvarInit --nochild;'
	fi
fi

if $bMaintenanceDaemon;then
	if ! secMaintenanceDaemon.sh --isdaemonstarted >>/dev/stderr;then
		# stdout must be redirected or the terminal wont let it be child...
		# nohup or disown alone did not work...
		secMaintenanceDaemon.sh >>/dev/stderr &
	fi
fi

# DO NOT use `SECFUNCcfgRead` here, associative arrays will be messed up if not initialized BEFORE this.
#echo 'SECFUNCcfgRead;' # the file will only be generated on its first write

